diff --git a/src/gitUtils.ts b/src/gitUtils.ts
index 869982b2241c30629df3b83c7c75b9ce9f6a35d1..ae9c2437300d91b2bc75c6a4cbecd2643d0caef5 100644
--- a/src/gitUtils.ts
+++ b/src/gitUtils.ts
@@ -168,3 +168,89 @@ export async function getFileCommitDate(
   }
   return {date, timestamp};
 }
+
+/**
+ * Fetches the git history of a file and returns a relevant commit hash.
+ *
+ * @throws {@link GitNotFoundError} If git is not found in `PATH`.
+ * @throws {@link FileNotTrackedError} If the current file is not tracked by git.
+ * @throws Also throws when `git log` exited with non-zero, or when it outputs
+ * unexpected text.
+ */
+export async function getFileCommitHash(
+  /** Absolute path to the file. */
+  file: string
+): Promise<{
+  /** The author's commit hash, as returned from git. */
+  commit: string;
+}>;
+
+export async function getFileCommitHash(file: string): Promise<{
+  commit: string;
+}> {
+  if (!hasGit()) {
+    throw new GitNotFoundError(
+      `Failed to retrieve git history for "${file}" because git is not installed.`
+    );
+  }
+
+  if (!(await fs.pathExists(file))) {
+    throw new Error(
+      `Failed to retrieve git history for "${file}" because the file does not exist.`
+    );
+  }
+
+  // We add a "RESULT:" prefix to make parsing easier
+  // See why: https://github.com/facebook/docusaurus/pull/10022
+  const resultFormat = "RESULT:%h";
+
+  const args = [`--format=${resultFormat}`, "--max-count=1"].filter(Boolean).join(" ");
+
+  const command = `git -c log.showSignature=false log ${args} -- "${path.basename(file)}"`;
+
+  const result = await new Promise<{
+    code: number;
+    stdout: string;
+    stderr: string;
+  }>((resolve) => {
+    shell.exec(
+      command,
+      {
+        // Setting cwd is important, see: https://github.com/facebook/docusaurus/pull/5048
+        cwd: path.dirname(file),
+        silent: true,
+      },
+      (code, stdout, stderr) => {
+        resolve({ code, stdout, stderr });
+      }
+    );
+  });
+
+  if (result.code !== 0) {
+    throw new Error(
+      `Failed to retrieve the git history for file "${file}" with exit code ${result.code}: ${result.stderr}`
+    );
+  }
+
+  // We only parse the output line starting with our "RESULT:" prefix
+  // See why https://github.com/facebook/docusaurus/pull/10022
+  const regex = /(?:^|\n)RESULT:(?<commit>\w+)(?:$|\n)/;
+
+  const output = result.stdout.trim();
+
+  if (!output) {
+    throw new FileNotTrackedError(
+      `Failed to retrieve the git history for file "${file}" because the file is not tracked by git.`
+    );
+  }
+
+  const match = output.match(regex);
+
+  if (!match) {
+    throw new Error(
+      `Failed to retrieve the git history for file "${file}" with unexpected output: ${output}`
+    );
+  }
+
+  return { commit: match.groups!.commit };
+}
